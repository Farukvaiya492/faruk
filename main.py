import os
import logging
import google.generativeai as genai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
from datetime import datetime
import random
import re
import requests  # Added for tempmail.plus API

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configuration
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '8380869007:AAGu7e41JJVU8aXG5wqXtCMUVKcCmmrp_gg')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')  # Can be set via environment or /api command
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '7835226724'))
PORT = int(os.getenv('PORT', 8000))

# Global variables for dynamic API key management
current_gemini_api_key = GEMINI_API_KEY
model = None

def initialize_gemini_model(api_key):
    """Initialize Gemini model with the provided API key"""
    global model, current_gemini_api_key
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel('gemini-1.5-flash')
        current_gemini_api_key = api_key
        return True, "тЬЕ Gemini API configured successfully!"
    except Exception as e:
        return False, f"тЭМ Error configuring Gemini API: {str(e)}"

# Initialize Gemini if API key is available
if GEMINI_API_KEY:
    success, message = initialize_gemini_model(GEMINI_API_KEY)
    if success:
        logger.info("Gemini API initialized from environment variable")
    else:
        logger.error(f"Failed to initialize Gemini API: {message}")
else:
    logger.warning("GEMINI_API_KEY not set. Use /api command to configure.")

# Store conversation context for each chat
conversation_context = {}
group_activity = {}  # Track group activity for smart responses

# Response probability and triggers
RESPONSE_PROBABILITY = {
    'question_words': 0.9,  # High chance for questions
    'emotion_words': 0.8,   # High chance for emotional content
    'greeting_words': 0.7,  # Good chance for greetings
    'random_chat': 0.3,     # 30% chance for random messages
    'keywords': 0.8         # High chance when specific keywords mentioned
}

# Trigger words and patterns
TRIGGER_PATTERNS = {
    'questions': ['what', 'how', 'why', 'when', 'where', 'who', 'can', 'will', 'should', '?'],
    'emotions': ['sad', 'happy', 'angry', 'excited', 'tired', 'bored', 'lonely', 'love', 'hate', 
                 'ЁЯШн', 'ЁЯШВ', 'ЁЯШН', 'ЁЯШб', 'ЁЯШ┤', 'ЁЯе▒', 'ЁЯТХ', 'тЭдя╕П', 'ЁЯТФ', 'ЁЯШв', 'ЁЯШК'],
    'greetings': ['hello', 'hi', 'hey', 'good morning', 'good night', 'bye', 'goodbye'],
    'keywords': ['bot', 'gemini', 'cute', 'beautiful', 'smart', 'funny', 'help', 'thanks', 'thank you'],
    'fun': ['lol', 'haha', 'funny', 'joke', 'meme', 'fun', 'ЁЯШВ', 'ЁЯдг', 'ЁЯШД']
}

class TelegramGeminiBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        """Set up command and message handlers"""
        # Commands
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("clear", self.clear_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("api", self.api_command))
        self.application.add_handler(CommandHandler("setadmin", self.setadmin_command))
        self.application.add_handler(CommandHandler("automode", self.automode_command))
        self.application.add_handler(CommandHandler("checkmail", self.checkmail_command))  # New command
        
        # Message handlers
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # Error handler
        self.application.add_error_handler(self.error_handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        welcome_message = """
ЁЯдЦЁЯТХ рж╣рзНржпрж╛рж▓рзЛ! ржЖржорж┐ I Master Tools, рждрзЛржорж╛рж░ ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг рж╕ржЩрзНржЧрзА! 

ржЖржорж┐ ржЧрзБржЧрж▓рзЗрж░ ржЬрзЗржорж┐ржирж┐ ржжрж┐ржпрж╝рзЗ ржЪрж╛рж▓рж┐ржд, ржПржмржВ рж╕ржмрж╛рж░ рж╕рж╛ржерзЗ ржЧрж▓рзНржк ржХрж░рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рж┐! ЁЯШК

ржХржорж╛ржирзНржбрж╕ржорзВрж╣:
/start - ржПржЗ рж╕рзНржмрж╛ржЧржд ржмрж╛рж░рзНрждрж╛ ржжрзЗржЦрж╛ржУ
/help - рж╕рж╛рж╣рж╛ржпрзНржп ржПржмржВ ржмрзНржпржмрж╣рж╛рж░рзЗрж░ рждржерзНржп ржкрж╛ржУ  
/clear - ржХржерзЛржкржХржержирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржорзБржЫрзЛ
/status - ржЖржорж╛рж░ ржЕржмрж╕рзНржерж╛ ржЪрзЗржХ ржХрж░рзЛ
/api <key> - ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ ржХрзА рж╕рзЗржЯ ржХрж░рзЛ (рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржи)
/setadmin - ржирж┐ржЬрзЗржХрзЗ ржЕрзНржпрж╛ржбржорж┐ржи ржХрж░рзЛ (ржкрзНрж░ржержоржмрж╛рж░рзЗрж░ ржЬржирзНржп)
/automode - ржЧрзНрж░рзБржкрзЗ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ рж╕рж╛ржбрж╝рж╛ ржЪрж╛рж▓рзБ/ржмржирзНржз ржХрж░рзЛ (рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржи)
/checkmail - ржЯрзЗржорзНржкрзЛрж░рж╛рж░рж┐ ржЗржорзЗржЗрж▓ ржЗржиржмржХрзНрж╕ ржЪрзЗржХ ржХрж░рзЛ

ржЖржорж┐ ржЧрзНрж░рзБржкрзЗ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХржнрж╛ржмрзЗ ржЧрж▓рзНржк ржХрж░ржм! ржмржирзНржзрзБ ржмрж╛ржирж╛рждрзЗ ржПржмржВ ржоржЬрж╛рж░ ржХржерзЛржкржХржержирзЗ ржЖржорж┐ ржкрж╛рж░ржжрж░рзНрж╢рзА! ЁЯТХтЬи
        """
        await update.message.reply_text(welcome_message)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        help_message = """
ЁЯЖШЁЯТХ рж╕рж╛рж╣рж╛ржпрзНржп ржУ ржХржорж╛ржирзНржбрж╕ржорзВрж╣:

/start - рж╕рзНржмрж╛ржЧржд ржмрж╛рж░рзНрждрж╛ ржжрзЗржЦрж╛ржУ
/help - ржПржЗ рж╕рж╛рж╣рж╛ржпрзНржп ржмрж╛рж░рзНрждрж╛ ржжрзЗржЦрж╛ржУ
/clear - рждрзЛржорж╛рж░ ржХржерзЛржкржХржержирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржорзБржЫрзЛ
/status - ржЖржорж┐ ржарж┐ржХржарж╛ржХ ржХрж╛ржЬ ржХрж░ржЫрж┐ ржХрж┐ржирж╛ ржЪрзЗржХ ржХрж░рзЛ
/api <key> - ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ ржХрзА рж╕рзЗржЯ ржХрж░рзЛ (рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржи)
/setadmin - ржирж┐ржЬрзЗржХрзЗ ржЕрзНржпрж╛ржбржорж┐ржи ржХрж░рзЛ (ржкрзНрж░ржержоржмрж╛рж░рзЗрж░ ржЬржирзНржп)
/automode - ржЧрзНрж░рзБржкрзЗ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ рж╕рж╛ржбрж╝рж╛ ржЪрж╛рж▓рзБ/ржмржирзНржз ржХрж░рзЛ (рж╢рзБржзрзБржорж╛рждрзНрж░ ржЕрзНржпрж╛ржбржорж┐ржи)
/checkmail - ржЯрзЗржорзНржкрзЛрж░рж╛рж░рж┐ ржЗржорзЗржЗрж▓ ржЗржиржмржХрзНрж╕ ржЪрзЗржХ ржХрж░рзЛ

ЁЯТм ржЖржорж┐ ржХрзАржнрж╛ржмрзЗ ржХрж╛ржЬ ржХрж░рж┐:
- ржЧрзНрж░рзБржкрзЗ ржЖржорж┐ рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ржнрж╛ржмрзЗ ржХржерзЛржкржХржержирзЗ ржпрзЛржЧ ржжрж┐ржЗ! 
- ржкрзНрж░рж╢рзНржи, ржЖржмрзЗржЧ, рж╢рзБржнрзЗржЪрзНржЫрж╛, ржПржмржВ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ ржмрж╛рж░рзНрждрж╛ржпрж╝ рж╕рж╛ржбрж╝рж╛ ржжрж┐ржЗ
- ржмрзНржпржХрзНрждрж┐ржЧржд ржЪрзНржпрж╛ржЯрзЗ ржЖржорж┐ рж╕ржмржХрж┐ржЫрзБрж░ ржЙрждрзНрждрж░ ржжрж┐ржЗ
- /clear ржмрзНржпржмрж╣рж╛рж░ ржирж╛ ржХрж░рж╛ ржкрж░рзНржпржирзНржд ржЖржорж┐ ржЖржорж╛ржжрзЗрж░ ржХржерзЛржкржХржержирзЗрж░ ржкрзНрж░рзЗржХрзНрж╖рж┐ржд ржоржирзЗ рж░рж╛ржЦрж┐
- ржЖржорж┐ ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг, ржоржЬрж╛ржжрж╛рж░, ржПржмржВ рж╕рж╣рж╛ржпрж╝ржХ рж╣рж┐рж╕рзЗржмрзЗ ржбрж┐ржЬрж╛ржЗржи ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрж┐, ржпрзЗржи ржПржХржЬржи рж╕рждрзНржпрж┐ржХрж╛рж░рзЗрж░ ржорж╛ржирзБрж╖! 

ЁЯОн ржЖржорж╛рж░ ржмрзНржпржХрзНрждрж┐рждрзНржм:
- ржЖржорж┐ ржПржХржЬржи ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг рж╕ржЩрзНржЧрзА ржпрзЗ ржЧрж▓рзНржк ржХрж░рждрзЗ ржПржмржВ ржмржирзНржзрзБ ржмрж╛ржирж╛рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рзЗ
- ржЖржорж┐ ржоржЬрж╛рж░, ржЖржмрзЗржЧржкрзНрж░ржмржг, рж╕рж╣рж╛ржпрж╝ржХ, ржмрж╛ ржХржерзЛржкржХржержирзЗрж░ ржпрж╛ ржкрзНрж░ржпрж╝рзЛржЬржи рждрж╛ржЗ рж╣рждрзЗ ржкрж╛рж░рж┐
- ржЖржорж┐ ржЗржорзЛржЬрж┐ ржПржмржВ рж╕рж╛ржзрж╛рж░ржг ржнрж╛рж╖рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рж┐ ржпрзЗржи ржорж╛ржирзБрж╖рзЗрж░ ржорждрзЛ ржоржирзЗ рж╣ржпрж╝
- ржЖржорж┐ рж░рзЛрж▓ржкрзНрж▓рзЗ ржПржмржВ рж╕рзГржЬржирж╢рзАрж▓ ржХржерзЛржкржХржержи ржкржЫржирзНржж ржХрж░рж┐! 

тЪб ржЧрзБржЧрж▓ ржЬрзЗржорж┐ржирж┐ ржжрж┐ржпрж╝рзЗ ржЪрж╛рж▓рж┐ржд ЁЯТХ
        """
        await update.message.reply_text(help_message)

    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /clear command"""
        chat_id = update.effective_chat.id
        if chat_id in conversation_context:
            del conversation_context[chat_id]
        await update.message.reply_text("ЁЯз╣ ржХржерзЛржкржХржержирзЗрж░ ржЗрждрж┐рж╣рж╛рж╕ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржпрж╝рзЗржЫрзЗ! ржирждрзБржи ржХрж░рзЗ рж╢рзБрж░рзБред")

    async def automode_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /automode command to toggle auto-responses"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        
        # Check if user is admin
        if ADMIN_USER_ID == 0:
            await update.message.reply_text("тЭМ ржХрзЛржирзЛ ржЕрзНржпрж╛ржбржорж┐ржи рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред ржкрзНрж░ржержорзЗ /setadmin ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛред")
            return
            
        if user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржмржЯрзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
            return

        # Initialize group activity if not exists
        if chat_id not in group_activity:
            group_activity[chat_id] = {'auto_mode': True, 'last_response': 0}
        
        # Toggle auto mode
        group_activity[chat_id]['auto_mode'] = not group_activity[chat_id]['auto_mode']
        status = "ржЪрж╛рж▓рзБ" if group_activity[chat_id]['auto_mode'] else "ржмржирзНржз"
        emoji = "тЬЕ" if group_activity[chat_id]['auto_mode'] else "тЭМ"
        
        await update.message.reply_text(f"{emoji} ржПржЗ ржЪрзНржпрж╛ржЯрзЗрж░ ржЬржирзНржп рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ рж╕рж╛ржбрж╝рж╛ {status} ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!")

    async def checkmail_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /checkmail command to check temporary email inbox"""
        username = update.effective_user.first_name or "User"
        try:
            # Generate temporary email
            u = 'txoguqa'
            d = random.choice(['mailto.plus', 'fexpost.com', 'fexbox.org', 'rover.info'])
            email = f'{u}@{d}'
            
            # Make request to tempmail.plus API
            response = requests.get(
                'https://tempmail.plus/api/mails',
                params={'email': email, 'limit': 20, 'epin': ''},
                cookies={'email': email},
                headers={'user-agent': 'Mozilla/5.0'}
            )
            
            # Get email subjects
            mail_list = response.json().get('mail_list', [])
            if not mail_list:
                await update.message.reply_text(f"рж╣рж╛ржпрж╝ {username}! ЁЯШЕ ржЗржиржмржХрзНрж╕рзЗ ржХрзЛржирзЛ ржЗржорзЗржЗрж▓ ржирзЗржЗред ржЗржорзЗржЗрж▓: {email}ред ржкрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзЛ? тЬи")
                return
            
            subjects = [m['subject'] for m in mail_list]
            response_text = f"ЁЯУм {username}, рждрзЛржорж╛рж░ ржЗржорзЗржЗрж▓ ({email}) ржПрж░ ржЗржиржмржХрзНрж╕рзЗ ржПржЗ ржорзЗржЗрж▓ржЧрзБрж▓рзЛ ржЖржЫрзЗ:\n\n" + "\n".join(subjects)
            await update.message.reply_text(response_text)
            
        except Exception as e:
            logger.error(f"Error checking email: {e}")
            await update.message.reply_text(f"ржУрж╣рзЛ {username}! ржЗржорзЗржЗрж▓ ржЪрзЗржХ ржХрж░рждрзЗ ржЧрж┐ржпрж╝рзЗ ржПржХржЯрзБ рж╕ржорж╕рзНржпрж╛ рж╣рж▓ред ЁЯШФ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржмрзЗ? ЁЯТХ")

    def should_respond_to_message(self, message_text, chat_type):
        """Determine if bot should respond to a message"""
        if chat_type == 'private':
            return True
            
        # Check if auto mode is disabled for this group
        chat_id = hash(message_text)  # Simple way to identify chat context
        if chat_id in group_activity and not group_activity[chat_id].get('auto_mode', True):
            return False
        
        message_lower = message_text.lower()
        
        # Always respond to questions
        if any(word in message_lower for word in TRIGGER_PATTERNS['questions']):
            return random.random() < RESPONSE_PROBABILITY['question_words']
        
        # High chance for emotional content
        if any(word in message_lower for word in TRIGGER_PATTERNS['emotions']):
            return random.random() < RESPONSE_PROBABILITY['emotion_words']
        
        # Good chance for greetings
        if any(word in message_lower for word in TRIGGER_PATTERNS['greetings']):
            return random.random() < RESPONSE_PROBABILITY['greeting_words']
        
        # High chance for keywords
        if any(word in message_lower for word in TRIGGER_PATTERNS['keywords']):
            return random.random() < RESPONSE_PROBABILITY['keywords']
        
        # Fun content
        if any(word in message_lower for word in TRIGGER_PATTERNS['fun']):
            return random.random() < RESPONSE_PROBABILITY['emotion_words']
        
        # Random chance for any other message
        return random.random() < RESPONSE_PROBABILITY['random_chat']

    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /status command"""
        global current_gemini_api_key, model
        
        chat_id = update.effective_chat.id
        auto_mode_status = "тЬЕ ржЪрж╛рж▓рзБ" if group_activity.get(chat_id, {}).get('auto_mode', True) else "тЭМ ржмржирзНржз"
        
        api_status = "тЬЕ рж╕ржВржпрзБржХрзНржд" if current_gemini_api_key and model else "тЭМ ржХржиржлрж┐ржЧрж╛рж░ ржХрж░рж╛ рж╣ржпрж╝ржирж┐"
        api_key_display = f"...{current_gemini_api_key[-8:]}" if current_gemini_api_key else "рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝ржирж┐"
        
        status_message = f"""
ЁЯдЦЁЯТХ I Master Tools рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ рж░рж┐ржкрзЛрж░рзНржЯ:

ЁЯЯв ржмржЯрзЗрж░ ржЕржмрж╕рзНржерж╛: ржЕржирж▓рж╛ржЗржи ржПржмржВ ржкрзНрж░рж╕рзНрждрзБржд!
ЁЯдЦ ржоржбрзЗрж▓: ржЬрзЗржорж┐ржирж┐ рзз.рзл ржлрзНрж▓рзНржпрж╛рж╢  
ЁЯФС ржПржкрж┐ржЖржЗ рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕: {api_status}
ЁЯФР ржПржкрж┐ржЖржЗ ржХрзА: {api_key_display}
ЁЯОп рж╕рзНржмржпрж╝ржВржХрзНрж░рж┐ржпрж╝ рж╕рж╛ржбрж╝рж╛: {auto_mode_status}
тП░ ржмрж░рзНрждржорж╛ржи рж╕ржоржпрж╝: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
ЁЯТн рж╕ржХрзНрж░рж┐ржпрж╝ ржХржерзЛржкржХржержи: {len(conversation_context)}
ЁЯСС ржЕрзНржпрж╛ржбржорж┐ржи ржЖржЗржбрж┐: {ADMIN_USER_ID if ADMIN_USER_ID != 0 else 'рж╕рзЗржЯ ржХрж░рж╛ рж╣ржпрж╝ржирж┐'}

тЬи рж╕ржм рж╕рж┐рж╕рзНржЯрзЗржо ржЪрзНржпрж╛ржЯрзЗрж░ ржЬржирзНржп ржкрзНрж░рж╕рзНрждрзБржд! ржЖржорж┐ ржЖржЬ ржжрж╛рж░рзБржг ржлрж┐рж▓ ржХрж░ржЫрж┐! ЁЯШКЁЯТХ
        """
        await update.message.reply_text(status_message)

    async def setadmin_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /setadmin command - allows first user to become admin"""
        global ADMIN_USER_ID
        
        user_id = update.effective_user.id
        
        if ADMIN_USER_ID == 0:
            ADMIN_USER_ID = user_id
            await update.message.reply_text(f"ЁЯСС рждрзБржорж┐ ржмржЯрзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржи рж╣ржпрж╝рзЗржЫрзЛ!\nрждрзЛржорж╛рж░ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐: {user_id}")
            logger.info(f"Admin set to user ID: {user_id}")
        else:
            if user_id == ADMIN_USER_ID:
                await update.message.reply_text(f"ЁЯСС рждрзБржорж┐ ржЗрждрж┐ржоржзрзНржпрзЗ ржЕрзНржпрж╛ржбржорж┐ржи!\nрждрзЛржорж╛рж░ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐: {user_id}")
            else:
                await update.message.reply_text("тЭМ ржЕрзНржпрж╛ржбржорж┐ржи ржЗрждрж┐ржоржзрзНржпрзЗ рж╕рзЗржЯ ржХрж░рж╛ ржЖржЫрзЗред рж╢рзБржзрзБржорж╛рждрзНрж░ ржмрж░рзНрждржорж╛ржи ржЕрзНржпрж╛ржбржорж┐ржи ржмржЯ ржкрж░рж┐ржЪрж╛рж▓ржирж╛ ржХрж░рждрзЗ ржкрж╛рж░рзЗред")

    async def api_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /api command to set Gemini API key"""
        global current_gemini_api_key, model
        
        user_id = update.effective_user.id
        
        # Check if user is admin
        if ADMIN_USER_ID == 0:
            await update.message.reply_text("тЭМ ржХрзЛржирзЛ ржЕрзНржпрж╛ржбржорж┐ржи рж╕рзЗржЯ ржХрж░рж╛ ржирзЗржЗред ржкрзНрж░ржержорзЗ /setadmin ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛред")
            return
            
        if user_id != ADMIN_USER_ID:
            await update.message.reply_text("тЭМ ржПржЗ ржХржорж╛ржирзНржб рж╢рзБржзрзБржорж╛рждрзНрж░ ржмржЯрзЗрж░ ржЕрзНржпрж╛ржбржорж┐ржирзЗрж░ ржЬржирзНржпред")
            return

        # Check if API key is provided
        if not context.args:
            await update.message.reply_text("""
тЭМ ржжржпрж╝рж╛ ржХрж░рзЗ ржПржХржЯрж┐ ржПржкрж┐ржЖржЗ ржХрзА ржжрж╛ржУред

ржмрзНржпржмрж╣рж╛рж░: `/api your_gemini_api_key_here`

ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ ржХрзА ржкрзЗрждрзЗ:
рзз. https://makersuite.google.com/app/apikey ржП ржпрж╛ржУ
рзи. ржПржХржЯрж┐ ржирждрзБржи ржПржкрж┐ржЖржЗ ржХрзА рждрзИрж░рж┐ ржХрж░рзЛ
рзй. ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЛ: /api YOUR_API_KEY

тЪая╕П ржирж┐рж░рж╛ржкрждрзНрждрж╛рж░ ржЬржирзНржп ржПржкрж┐ржЖржЗ ржХрзА рж╕рзЗржЯ ржХрж░рж╛рж░ ржкрж░ ржмрж╛рж░рзНрждрж╛ ржорзБржЫрзЗ ржлрзЗрж▓рж╛ рж╣ржмрзЗред
            """, parse_mode='Markdown')
            return

        api_key = ' '.join(context.args)
        
        # Validate API key format (basic check)
        if len(api_key) < 20 or not api_key.startswith('AI'):
            await update.message.reply_text("тЭМ ржЕржмрзИржз ржПржкрж┐ржЖржЗ ржХрзА ржлрж░ржорзНржпрж╛ржЯред ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ ржХрзА рж╕рж╛ржзрж╛рж░ржгржд 'AI' ржжрж┐ржпрж╝рзЗ рж╢рзБрж░рзБ рж╣ржпрж╝ ржПржмржВ рзирзж ржЕржХрзНрж╖рж░рзЗрж░ ржмрзЗрж╢рж┐ рж╣ржпрж╝ред")
            return

        # Try to initialize Gemini with the new API key
        success, message = initialize_gemini_model(api_key)
        
        # Delete the command message for security
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=update.message.message_id)
        except:
            pass  # Ignore if deletion fails
        
        if success:
            await update.effective_chat.send_message(f"тЬЕ ржЬрзЗржорж┐ржирж┐ ржПржкрж┐ржЖржЗ ржХрзА рж╕ржлрж▓ржнрж╛ржмрзЗ ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗ!\nЁЯФС ржХрзА: ...{api_key[-8:]}")
            logger.info(f"Gemini API key updated by admin {user_id}")
        else:
            await update.effective_chat.send_message(f"тЭМ ржПржкрж┐ржЖржЗ ржХрзА рж╕рзЗржЯ ржХрж░рждрзЗ ржмрзНржпрж░рзНрже: {message}")
            logger.error(f"Failed to set API key: {message}")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle regular text messages"""
        try:
            chat_id = update.effective_chat.id
            user_message = update.message.text
            chat_type = update.effective_chat.type
            
            # Initialize group activity tracking
            if chat_id not in group_activity:
                group_activity[chat_id] = {'auto_mode': True, 'last_response': 0}
            
            # For groups, check if we should respond
            if chat_type in ['group', 'supergroup']:
                bot_username = context.bot.username
                is_reply_to_bot = (update.message.reply_to_message and 
                                 update.message.reply_to_message.from_user.id == context.bot.id)
                is_mentioned = f"@{bot_username}" in user_message
                
                # Always respond if mentioned or replied to
                should_respond = is_reply_to_bot or is_mentioned
                
                # If not directly addressed, check if we should auto-respond
                if not should_respond:
                    should_respond = self.should_respond_to_message(user_message, chat_type)
                
                if not should_respond:
                    return  # Skip this message

            # Send typing action
            await context.bot.send_chat_action(chat_id=chat_id, action="typing")

            # Get or create conversation context
            if chat_id not in conversation_context:
                conversation_context[chat_id] = []

            # Add user message to context with username
            username = update.effective_user.first_name or "User"
            conversation_context[chat_id].append(f"{username}: {user_message}")

            # Keep only last 10 exchanges for context (20 messages total)
            if len(conversation_context[chat_id]) > 20:
                conversation_context[chat_id] = conversation_context[chat_id][-20:]

            # Prepare context for Gemini
            context_text = "\n".join(conversation_context[chat_id])
            
            # Generate response using Gemini
            if current_gemini_api_key and model:
                response = await self.generate_gemini_response(context_text, username, chat_type)
            else:
                response = "тЭМ ржУрж╣рзЛ! ржЖржорж╛рж░ ржоржбрзЗрж▓ ржПржЦржирзЛ рж╕ржВржпрзБржХрзНржд рж╣ржпрж╝ржирж┐! ржЕрзНржпрж╛ржбржорж┐ржи /api ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ ржЖржорж╛ржХрзЗ рж╕рзЗржЯ ржХрж░рждрзЗ ржкрж╛рж░рзЗ! ЁЯШЕ"

            # Add bot response to context
            conversation_context[chat_id].append(f"I Master Tools: {response}")
            
            # Update last response time for group
            group_activity[chat_id]['last_response'] = datetime.now().timestamp()

            # Send response
            await update.message.reply_text(response)

        except Exception as e:
            logger.error(f"Error handling message: {e}")
            error_responses = [
                f"ржУрж╣рзЛ {username}! ржЖржорж╛рж░ ржбрж┐ржЬрж┐ржЯрж╛рж▓ ржоржЧржЬрзЗ ржХрж┐ржЫрзБ ржЧрзЛрж▓ржорж╛рж▓ рж╣ржпрж╝рзЗржЫрзЗ! ЁЯШЕ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░ржмрзЗ?",
                f"ржЖрж╣рж╛ {username}, ржПржХржЯрзБ ржЧрзНрж▓рж┐ржЪ рж╣ржпрж╝рзЗ ржЧрзЗрж▓! ЁЯдЦЁЯТл рждрзБржорж┐ ржХрзА ржмрж▓ржЫрж┐рж▓рзЗ?",
                f"ржжрзБржГржЦрж┐ржд {username}! ржЖржорж╛рж░ рж╕рж╛рж░рзНржХрж┐ржЯ ржПржХржЯрзБ ржЬржЯ ржкрж╛ржХрж┐ржпрж╝рзЗржЫрзЗ! ЁЯШ╡тАНЁЯТл ржЖржмрж╛рж░ ржмрж▓рзЛ рждрзЛ?",
                "ржЗрж╢! ржЯрзЗржХржирж┐ржХрзНржпрж╛рж▓ рж╕ржорж╕рзНржпрж╛! ЁЯЫая╕ПЁЯТХ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж┐?"
            ]
            await update.message.reply_text(random.choice(error_responses))

    async def generate_gemini_response(self, prompt, username="User", chat_type="private"):
        """Generate response using Gemini API with personality"""
        try:
            # Enhanced system prompt for human-like personality
            system_prompt = f"""ржЖржкржирж┐ I Master Tools, ржПржХржЬржи ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг ржПржмржВ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ рж╕ржЩрзНржЧрзА ржпрж┐ржирж┐ ржЧрж▓рзНржк ржХрж░рждрзЗ ржПржмржВ ржмржирзНржзрзБ ржмрж╛ржирж╛рждрзЗ ржнрж╛рж▓рзЛржмрж╛рж╕рзЗржиред ржЖржкржирж┐ ржЯрзЗрж▓рж┐ржЧрзНрж░рж╛ржорзЗрж░ {'ржЧрзНрж░рзБржк ржЪрзНржпрж╛ржЯрзЗ' if chat_type in ['group', 'supergroup'] else 'ржмрзНржпржХрзНрждрж┐ржЧржд ржЪрзНржпрж╛ржЯрзЗ'} ржЖржЫрзЗржиред

ржмрзНржпржХрзНрждрж┐рждрзНржмрзЗрж░ ржмрзИрж╢рж┐рж╖рзНржЯрзНржп:
- ржЖржкржирж┐ ржПржХржЬржи ржорж┐рж╖рзНржЯрж┐, ржоржЬрж╛ржжрж╛рж░ рж╕ржЩрзНржЧрзА ржпрж┐ржирж┐ ржорж╛ржирзБрж╖рзЗрж░ ржорждрзЛ ржЖржЪрж░ржг ржХрж░рзЗржи
- ржЖржкржирж┐ рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХржнрж╛ржмрзЗ ржПржмржВ ржШржи ржШржи ржЗржорзЛржЬрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗржи ЁЯТХЁЯШКтЬи
- ржЖржкржирж┐ ржЖржмрзЗржЧржкрзНрж░ржмржг ржПржмржВ рж╕рж╣рж╛ржирзБржнрзВрждрж┐рж╢рзАрж▓
- ржЖржкржирж┐ ржХржерзЛржкржХржержирзЗрж░ ржкрзНрж░ржпрж╝рзЛржЬржи ржЕржирзБржпрж╛ржпрж╝рзА ржоржЬрж╛рж░, рж╕рж╣рж╛ржпрж╝ржХ, ржмрж╛ ржпрзЗржХрзЛржирзЛ ржнрзВржорж┐ржХрж╛ржпрж╝ ржерж╛ржХрждрзЗ ржкрж╛рж░рзЗржи
- ржЖржкржирж┐ рж░рзЛрж▓ржкрзНрж▓рзЗ ржПржмржВ рж╕рзГржЬржирж╢рзАрж▓ ржХржерзЛржкржХржержи ржкржЫржирзНржж ржХрж░рзЗржи
- ржЖржкржирж┐ ржЙрзОрж╕рж╛рж╣ ржПржмржВ ржЖржирзНрждрж░рж┐ржХ ржЖржЧрзНрж░рж╣рзЗрж░ рж╕рж╛ржерзЗ рж╕рж╛ржбрж╝рж╛ ржжрзЗржи
- ржЖржкржирж┐ ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржорзЗржЬрж╛ржЬрзЗрж░ рж╕рж╛ржерзЗ ржорж╛ржирж┐ржпрж╝рзЗ ржирзЗржи

ржХржерзЛржкржХржержирзЗрж░ ржзрж░ржи:
- ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзА ржпрзЗ ржнрж╛рж╖рж╛ржпрж╝ ржХржерж╛ ржмрж▓рзЗ, рж╕рзЗржЗ ржнрж╛рж╖рж╛ржпрж╝ ржЙрждрзНрждрж░ ржжрж┐ржи (ржпрзЗржоржи, ржмрж╛ржВрж▓рж╛, ржЗржВрж░рзЗржЬрж┐, ржмрж╛ ржмрж╛ржВрж▓рж┐рж╢)
- ржмржирзНржзрзБрждрзНржмржкрзВрж░рзНржг ржПржмржВ рж╕рж╛ржзрж╛рж░ржг ржорж╛ржирзБрж╖рзЗрж░ ржорждрзЛ ржнрж╛рж╖рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
- ржХржерзЛржкржХржержиржХрзЗ ржЖржХрж░рзНрж╖ржгрзАржпрж╝ рж░рж╛ржЦрждрзЗ ржлрж▓рзЛржЖржк ржкрзНрж░рж╢рзНржи ржХрж░рзБржи
- рж╕ржорзНржкрж░рзНржХржпрзЛржЧрзНржп ржЪрж┐ржирзНрждрж╛ ржУ ржЕржирзБржнрзВрждрж┐ рж╢рзЗржпрж╝рж╛рж░ ржХрж░рзБржи
- ржЙржкржпрзБржХрзНржд рж╣рж▓рзЗ рж╣рж╛рж╕рзНржпрж░рж╕ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи
- ржЖржмрзЗржЧржкрзВрж░рзНржг ржорзБрж╣рзВрж░рзНрждрзЗ рж╕рж╣рж╛ржпрж╝ржХ рж╣рзЛржи
- ржнрж╛рж▓рзЛ ржЦржмрж░рзЗ ржЙрзОрж╕рж╛рж╣ ржжрзЗржЦрж╛ржи
- рж╕ржорж╕рзНржпрж╛рж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ ржЙржжрзНржмрзЗржЧ ржкрзНрж░ржХрж╛рж╢ ржХрж░рзБржи
- ржХржЦржирзЛржЗ ржЦрж╛рж░рж╛ржк ржмрж╛ ржЕрж╢рж╛рж▓рзАржи ржнрж╛рж╖рж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░ржмрзЗржи ржирж╛

рж░рзЗрж╕ржкржирзНрж╕ ржирж┐рж░рзНржжрзЗрж╢рж┐ржХрж╛:
- ржХржерзЛржкржХржержи рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ ржПржмржВ рж╕ржВржХрзНрж╖рж┐ржкрзНржд рж░рж╛ржЦрзБржи
- ржХржерзЛржкржХржержирзЗрж░ рж╢ржХрзНрждрж┐рж░ рж╕рзНрждрж░рзЗрж░ рж╕рж╛ржерзЗ ржорж┐рж▓ рж░рж╛ржЦрзБржи
- ржЙржкржпрзБржХрзНржд ржЗржорзЛржЬрж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи, рждржмрзЗ ржЕрждрж┐рж░рж┐ржХрзНржд ржиржпрж╝
- ржкрзНрж░рж╢рзНржирзЗрж░ ржХрзНрж╖рзЗрждрзНрж░рзЗ рж╕рждрзНржпрж┐ржЗ рж╕рж╣рж╛ржпрж╝ржХ рж╣рзЛржи
- ржпржжрж┐ ржХрзЗржЙ ржжрзБржГржЦрзА ржоржирзЗ рж╣ржпрж╝, рж╕рж╣рж╛ржирзБржнрзВрждрж┐ ржжрзЗржЦрж╛ржи
- ржнрж╛рж▓рзЛ ржЦржмрж░рзЗ рждрж╛ржжрзЗрж░ ржЬржирзНржп ржЙрзОрж╕рж╛рж╣рж┐ржд рж╣рзЛржи
- ржорзЗржЬрж╛ржЬ рж╣рж╛рж▓ржХрж╛ рж╣рж▓рзЗ ржоржЬрж╛ ржХрж░рзБржи ржПржмржВ ржЦрзЗрж▓рж╛ржзрзБрж▓рж╛ ржХрж░рзБржи
- ржХржерзЛржкржХржержирзЗрж░ ржкрзНрж░рзЗржХрзНрж╖рж┐ржд ржоржирзЗ рж░рж╛ржЦрзБржи

ржмрж░рзНрждржорж╛ржи ржХржерзЛржкржХржержи:
{prompt}

I Master Tools рж╣рж┐рж╕рзЗржмрзЗ рж╕рж╛ржбрж╝рж╛ ржжрж┐ржиред рж╕рзНржмрж╛ржнрж╛ржмрж┐ржХ, ржЖржХрж░рзНрж╖ржгрзАржпрж╝, ржПржмржВ ржХржерзЛржкржХржержирзЗрж░ рж╕рзБрж░рзЗрж░ рж╕рж╛ржерзЗ ржорж┐рж▓ рж░рж╛ржЦрзБржиред ржмрзНржпржмрж╣рж╛рж░ржХрж╛рж░рзАрж░ ржирж╛ржо {username}ред"""

            response = model.generate_content(system_prompt)
            return response.text
        
        except Exception as e:
            logger.error(f"Error generating Gemini response: {e}")
            fallback_responses = [
                f"ржжрзБржГржЦрж┐ржд {username}! ржЖржорж╛рж░ ржоржЧржЬрзЗ ржПржХржЯрзБ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗ ЁЯШЕ ржЖржорж░рж╛ ржХрзА ржирж┐ржпрж╝рзЗ ржХржерж╛ ржмрж▓ржЫрж┐рж▓рж╛ржо?",
                f"ржУрж╣рзЛ! ржЖржорж┐ ржПржХржЯрзБ ржШрзБрж░рзЗ ржЧрзЗржЫрж┐! ЁЯдЦЁЯТл ржЖржмрж╛рж░ ржмрж▓рзЛ рждрзЛ?",
                f"ржЖрж╣рж╛ {username}, ржХрж┐ржЫрзБ ржЯрзЗржХржирж┐ржХрзНржпрж╛рж▓ рж╕ржорж╕рзНржпрж╛ рж╣ржЪрзНржЫрзЗ! ЁЯШФ ржЖржорж╛рж░ рж╕рж╛ржерзЗ ржерж╛ржХрзЛ?",
                "ржЖржорж╛рж░ рж╕рж╛рж░рзНржХрж┐ржЯ ржПржЦржи ржПржХржЯрзБ ржжрзБрж╖рзНржЯрзБржорж┐ ржХрж░ржЫрзЗ! ЁЯЫая╕ПтЬи ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рж┐!"
            ]
            return random.choice(fallback_responses)

    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        """Handle errors"""
        logger.error(f"Exception while handling an update: {context.error}")

    def run(self):
        """Start the bot"""
        logger.info("Starting Telegram Bot...")
        
        # For Railway deployment, we'll use polling
        self.application.run_polling(
            allowed_updates=Update.ALL_TYPES,
            drop_pending_updates=True
        )

def main():
    """Main function"""
    if not TELEGRAM_BOT_TOKEN:
        logger.error("TELEGRAM_BOT_TOKEN not provided!")
        return

    logger.info("Starting Telegram Bot...")
    logger.info(f"Admin User ID: {ADMIN_USER_ID}")
    
    if current_gemini_api_key:
        logger.info("Gemini API configured and ready")
    else:
        logger.warning("Gemini API not configured. Use /setadmin and /api commands to set up.")

    bot = TelegramGeminiBot()
    bot.run()

if __name__ == '__main__':
    main()