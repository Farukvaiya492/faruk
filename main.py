import os
import logging
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import asyncio
from datetime import datetime, timedelta

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Configuration
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', 'YOUR_BOT_TOKEN_HERE')  # Replace with your bot token
PHONE_API_KEY = "num_live_Nf2vjeM19tHdi42qQ2LaVVMg2IGk1ReU2BYBKnvm"  # NumLookup API key
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID', '7835226724'))  # Replace with your admin user ID
GROUP_CHAT_USERNAME = "@VPSHUB_BD_CHAT"  # Replace with your group chat username

# Store conversation context and user likes
conversation_context = {}
user_likes = {}  # To track user /like command usage with timestamps

async def validate_phone_number(phone_number: str, api_key: str, country_code: str = None):
    """
    Validate a phone number using NumLookup API
    :param phone_number: Phone number to validate
    :param api_key: NumLookup API key
    :param country_code: Optional country code (e.g., BD, US)
    :return: Formatted response string in Bangla
    """
    base_url = "https://api.numlookupapi.com/v1/validate"
    params = {"apikey": api_key, "country_code": country_code}
    url = f"{base_url}/{phone_number}"
    
    try:
        response = requests.get(url, params=params, timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('valid', False):
                response_lines = ["‡¶è‡¶á ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶æ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶≤‡¶æ‡¶Æ, ‡¶¶‡ßá‡¶ñ‡ßã ‡¶ï‡ßÄ ‡¶™‡ßá‡¶≤‡¶æ‡¶Æ! üòä"]
                if data.get('number'):
                    response_lines.append(f"üìû ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞: {data['number']}")
                if data.get('country_name') and data.get('country_code'):
                    response_lines.append(f"üåç ‡¶¶‡ßá‡¶∂: {data['country_name']} ({data['country_code']})")
                elif data.get('country_name'):
                    response_lines.append(f"üåç ‡¶¶‡ßá‡¶∂: {data['country_name']}")
                if data.get('location'):
                    response_lines.append(f"üìç ‡¶≤‡ßã‡¶ï‡ßá‡¶∂‡¶®: {data['location']}")
                if data.get('carrier'):
                    response_lines.append(f"üì° ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ‡¶∞: {data['carrier']}")
                if data.get('line_type'):
                    response_lines.append(f"üì± ‡¶≤‡¶æ‡¶á‡¶®‡ßá‡¶∞ ‡¶ß‡¶∞‡¶®: {data['line_type']}")
                response_lines.append("‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ By Faruk ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶")
                return "\n".join(response_lines)
            else:
                return "‚ùå ‡¶è‡¶á ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶æ ‡¶¨‡ßà‡¶ß ‡¶®‡¶Ø‡¶º‡•§ ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶æ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá? üòä"
        else:
            return f"‚ùå ‡¶§‡¶•‡ßç‡¶Ø ‡¶™‡ßá‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá: ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶° {response.status_code}\n‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {response.text}"
    except Exception as e:
        logger.error(f"Error validating phone number: {e}")
        return "‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶ö‡ßá‡¶ï ‡¶ï‡¶∞‡¶§‡ßá ‡¶ó‡¶ø‡¶Ø‡¶º‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßã‡•§ üòÖ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨? ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶æ ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶æ‡¶ì!"

async def download_youtube_video(video_url: str, bot, chat_id):
    """
    Download YouTube video using provided API and send to Telegram
    :param video_url: YouTube video URL
    :param bot: Telegram bot instance
    :param chat_id: Telegram chat ID
    :return: None (sends video or error message directly)
    """
    api_url = f"https://ytdl.hideme.eu.org/{video_url}"
    
    try:
        await bot.send_chat_action(chat_id=chat_id, action="upload_video")
        response = requests.get(api_url, timeout=30)
        if response.status_code == 200:
            video_file = response.content
            # Check Telegram's 50 MB file size limit
            if len(video_file) > 50 * 1024 * 1024:
                await bot.send_message(
                    chat_id=chat_id,
                    text="‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ü‡¶æ ‡¶Ö‡¶®‡ßá‡¶ï ‡¶¨‡¶°‡¶º, ‡¶ü‡ßá‡¶≤‡¶ø‡¶ó‡ßç‡¶∞‡¶æ‡¶Æ‡ßá ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§ üòÖ ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶æ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶¶‡¶ø‡¶Ø‡¶º‡ßá ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá?"
                )
                return
            await bot.send_video(
                chat_id=chat_id,
                video=video_file,
                caption="üé¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá! üòä\n‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ By Faruk ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶"
            )
        else:
            await bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßã: ‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏ ‡¶ï‡ßã‡¶° {response.status_code}‡•§ üòÖ ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶æ ‡¶≤‡¶ø‡¶ô‡ßç‡¶ï ‡¶¶‡¶æ‡¶ì!"
            )
    except Exception as e:
        logger.error(f"Error downloading YouTube video: {e}")
        await bot.send_message(
            chat_id=chat_id,
            text="‚ùå ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶≤‡ßã! üòÖ ‡¶Ü‡¶∞‡ßá‡¶ï‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡¶¨‡ßá?"
        )

async def send_like(uid: str, server_name: str = "BD"):
    """
    Send likes to a Free Fire UID
    :param uid: Free Fire user ID
    :param server_name: Server name (default: BD)
    :return: Dictionary with response data
    """
    api_url = f"https://free-like-api-aditya-ffm.vercel.app/like?uid={uid}&server_name={server_name}&key=@adityaapis"
    
    try:
        response = requests.get(api_url, timeout=20)
        if response.status_code == 200:
            data = response.json()
            before = data.get("LikesbeforeCommand", 0)
            after = data.get("LikesafterCommand", 0)
            added = after - before
            level = data.get("PlayerLevel", "‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
            region = data.get("PlayerRegion", "‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
            nickname = data.get("PlayerNickname", "‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø")
            
            return {
                "uid": uid,
                "level": level,
                "region": region,
                "nickname": nickname,
                "before": before,
                "after": after,
                "added": added,
                "status": "‡¶∏‡¶´‡¶≤ ‚úÖ"
            }
        else:
            return {"status": f"‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {response.status_code}"}
    except Exception as e:
        return {"status": f"‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø: {str(e)}"}

class TelegramBot:
    def __init__(self):
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.setup_handlers()

    def setup_handlers(self):
        """Set up command and message handlers"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("clear", self.clear_command))
        self.application.add_handler(CommandHandler("validatephone", self.validatephone_command))
        self.application.add_handler(CommandHandler("ytdl", self.ytdl_command))
        self.application.add_handler(CommandHandler("like", self.like_command))
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, self.handle_new_member))
        self.application.add_error_handler(self.error_handler)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /start command"""
        user_id = update.effective_user.id
        username = update.effective_user.first_name or "User"
        chat_type = update.effective_chat.type

        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            response, reply_markup = await self.get_private_chat_redirect()
            await update.message.reply_text(response, reply_markup=reply_markup)
        else:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            welcome_message = f"""
‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã {username}, ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶ü‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! üòä ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ‡•§

‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶æ‡¶ì ‡¶¨‡¶æ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá @IMasterTools ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßã‡•§ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßã!

‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã:
- /help: ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶™‡¶æ‡¶ì
- /clear: ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶Æ‡ßÅ‡¶õ‡ßã
- /validatephone <‡¶®‡¶Æ‡ßç‡¶¨‡¶∞> [‡¶¶‡ßá‡¶∂‡ßá‡¶∞_‡¶ï‡ßã‡¶°]: ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á ‡¶ï‡¶∞‡ßã
- /ytdl <‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤>: ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡ßã
- /like <uid>: ‡¶´‡ßç‡¶∞‡¶ø ‡¶´‡¶æ‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶á‡¶â‡¶Ü‡¶á‡¶°‡¶ø-‡¶§‡ßá ‡¶≤‡¶æ‡¶á‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶ì

‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá @IMasterTools ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßã, ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡¶õ‡¶ø! üòÑ
            """
            await update.message.reply_text(welcome_message, reply_markup=reply_markup)

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /help command"""
        user_id = update.effective_user.id
        username = update.effective_user.first_name or "User"
        chat_type = update.effective_chat.type

        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            response, reply_markup = await self.get_private_chat_redirect()
            await update.message.reply_text(response, reply_markup=reply_markup)
        else:
            keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            help_message = f"""
‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã {username}! üòä ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶∏‡¶π‡¶ï‡¶æ‡¶∞‡ßÄ‡•§

‡¶ï‡ßÄ‡¶≠‡¶æ‡¶¨‡ßá ‡¶ï‡¶æ‡¶ú ‡¶ï‡¶∞‡¶ø:
- ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá @IMasterTools ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßã ‡¶¨‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶æ‡¶ì
- ‡¶™‡ßç‡¶∞‡¶æ‡¶á‡¶≠‡ßá‡¶ü ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶°‡¶Æ‡¶ø‡¶® ‡¶∏‡¶¨ ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡¶¨‡ßá‡¶®
- ‡¶Ü‡¶Æ‡¶ø ‡¶ï‡¶•‡ßã‡¶™‡¶ï‡¶•‡¶®‡ßá‡¶∞ ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶Æ‡¶®‡ßá ‡¶∞‡¶æ‡¶ñ‡¶ø ‡¶Ø‡¶§‡¶ï‡ßç‡¶∑‡¶£ ‡¶®‡¶æ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶Æ‡ßÅ‡¶õ‡ßã

‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ó‡ßÅ‡¶≤‡ßã:
- /start: ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú ‡¶¶‡ßá‡¶ñ‡¶æ‡¶ì
- /help: ‡¶è‡¶á ‡¶∏‡¶æ‡¶π‡¶æ‡¶Ø‡ßç‡¶Ø ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú
- /clear: ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶Æ‡ßÅ‡¶õ‡ßã
- /validatephone <‡¶®‡¶Æ‡ßç‡¶¨‡¶∞> [‡¶¶‡ßá‡¶∂‡ßá‡¶∞_‡¶ï‡ßã‡¶°]: ‡¶´‡ßã‡¶® ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶Ø‡¶æ‡¶ö‡¶æ‡¶á
- /ytdl <‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤>: ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°
- /like <uid>: ‡¶´‡ßç‡¶∞‡¶ø ‡¶´‡¶æ‡¶Ø‡¶º‡¶æ‡¶∞ ‡¶á‡¶â‡¶Ü‡¶á‡¶°‡¶ø-‡¶§‡ßá ‡¶≤‡¶æ‡¶á‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶ì

‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá @IMasterTools ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßã, ‡¶ö‡¶≤‡ßã ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶ø! üòÑ
            """
            await update.message.reply_text(help_message, reply_markup=reply_markup)

    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /clear command"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type

        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            response, reply_markup = await self.get_private_chat_redirect()
            await update.message.reply_text(response, reply_markup=reply_markup)
        else:
            if chat_id in conversation_context:
                del conversation_context[chat_id]
            await update.message.reply_text("‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶á‡¶§‡¶ø‡¶π‡¶æ‡¶∏ ‡¶Æ‡ßÅ‡¶õ‡ßá ‡¶´‡ßá‡¶≤‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ üòä ‡¶®‡¶§‡ßÅ‡¶® ‡¶ï‡¶∞‡ßá ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶ï‡¶∞‡¶ø!")

    async def validatephone_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /validatephone command"""
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type

        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            response, reply_markup = await self.get_private_chat_redirect()
            await update.message.reply_text(response, reply_markup=reply_markup)
            return

        if not context.args:
            await update.message.reply_text("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /validatephone <‡¶´‡ßã‡¶®_‡¶®‡¶Æ‡ßç‡¶¨‡¶∞> [‡¶¶‡ßá‡¶∂‡ßá‡¶∞_‡¶ï‡ßã‡¶°]\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /validatephone 01613950781 BD")
            return

        phone_number = context.args[0]
        country_code = context.args[1] if len(context.args) > 1 else None
        response_message = await validate_phone_number(phone_number, PHONE_API_KEY, country_code)
        await update.message.reply_text(response_message)

    async def ytdl_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /ytdl command"""
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type

        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            response, reply_markup = await self.get_private_chat_redirect()
            await update.message.reply_text(response, reply_markup=reply_markup)
            return

        if not context.args:
            await update.message.reply_text("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /ytdl <‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨_‡¶á‡¶â‡¶Ü‡¶∞‡¶è‡¶≤>\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /ytdl https://youtu.be/CWutFtS8Wg0")
            return

        video_url = ' '.join(context.args)
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        await download_youtube_video(video_url, context.bot, update.effective_chat.id)

    async def like_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle /like command with rate limiting"""
        user_id = update.effective_user.id
        chat_type = update.effective_chat.type

        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            response, reply_markup = await self.get_private_chat_redirect()
            await update.message.reply_text(response, reply_markup=reply_markup)
            return

        if chat_type in ['group', 'supergroup'] and update.message.chat.link != 'https://t.me/VPSHUB_BD_CHAT':
            await update.message.reply_text("‡¶è‡¶á ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°‡¶ü‡¶ø ‡¶∂‡ßÅ‡¶ß‡ßÅ‡¶Æ‡¶æ‡¶§‡ßç‡¶∞ @VPSHUB_BD_CHAT ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá‡•§ üòä")
            return

        if len(context.args) != 1:
            await update.message.reply_text("‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: /like <UID>\n‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: /like 123456789")
            return

        if user_id != ADMIN_USER_ID:
            last_like_time = user_likes.get(user_id)
            current_time = datetime.now()
            if last_like_time and (current_time - last_like_time).total_seconds() < 24 * 60 * 60:
                time_left = 24 * 60 * 60 - (current_time - last_like_time).total_seconds()
                hours_left = int(time_left // 3600)
                minutes_left = int((time_left % 3600) // 60)
                await update.message.reply_text(
                    f"‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶™‡ßç‡¶∞‡¶§‡¶ø ‡ß®‡ß™ ‡¶ò‡¶£‡ßç‡¶ü‡¶æ‡¶Ø‡¶º ‡¶è‡¶ï‡¶¨‡¶æ‡¶∞ /like ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶° ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡¶§‡ßá ‡¶™‡¶æ‡¶∞‡ßã‡•§ üòÖ "
                    f"‡¶™‡¶∞‡¶¨‡¶∞‡ßç‡¶§‡ßÄ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßã {hours_left} ‡¶ò‡¶£‡ßç‡¶ü‡¶æ {minutes_left} ‡¶Æ‡¶ø‡¶®‡¶ø‡¶ü‡•§"
                )
                return

        uid = context.args[0]
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        result = await send_like(uid)
        
        if "added" in result:
            message = (
                "‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶\n"
                f"‚îÇ üéâ ‡¶≤‡¶æ‡¶á‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶∏‡¶´‡¶≤! üòä ‚îÇ\n"
                f"‚îÇ üÜî UID: {result['uid']}\n"
                f"‚îÇ üéÆ ‡¶≤‡ßá‡¶≠‡ßá‡¶≤: {result['level']}\n"
                f"‚îÇ üåç ‡¶∞‡¶ø‡¶ú‡¶ø‡¶Ø‡¶º‡¶®: {result['region']}\n"
                f"‚îÇ üë§ ‡¶®‡¶ø‡¶ï‡¶®‡ßá‡¶Æ: {result['nickname']}\n"
                f"‚îÇ üìä ‡¶Ü‡¶ó‡ßá‡¶∞ ‡¶≤‡¶æ‡¶á‡¶ï: {result['before']}\n"
                f"‚îÇ üìà ‡¶™‡¶∞‡ßá‡¶∞ ‡¶≤‡¶æ‡¶á‡¶ï: {result['after']}\n"
                f"‚îÇ ‚ûï ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá: {result['added']}\n"
                "‚ú¶‚îÄ‚îÄ‚îÄ‚îÄ By Faruk ‚îÄ‚îÄ‚îÄ‚îÄ‚ú¶"
            )
            if user_id != ADMIN_USER_ID:
                user_likes[user_id] = datetime.now()
        else:
            message = f"‡¶≤‡¶æ‡¶á‡¶ï ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã‡¶§‡ßá ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶•‡•§ üòÖ\n‡¶∏‡ßç‡¶ü‡ßç‡¶Ø‡¶æ‡¶ü‡¶æ‡¶∏: {result.get('status', '‡¶Ö‡¶ú‡¶æ‡¶®‡¶æ ‡¶§‡ßç‡¶∞‡ßÅ‡¶ü‡¶ø')}"
        
        await update.message.reply_text(message)

    async def handle_new_member(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle new members joining the group"""
        for new_member in update.message.new_chat_members:
            username = new_member.first_name or "User"
            user_mention = f"@{new_member.username}" if new_member.username else username
            welcome_message = f"""
{user_mention}, {GROUP_CHAT_USERNAME} ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶∏‡ßç‡¶¨‡¶æ‡¶ó‡¶§‡¶Æ! üòä ‡¶Ü‡¶Æ‡¶ø ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ ‡¶¨‡¶®‡ßç‡¶ß‡ßÅ‡¶§‡ßç‡¶¨‡¶™‡ßÇ‡¶∞‡ßç‡¶£ ‡¶¨‡¶ü‡•§ @IMasterTools ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßã ‡¶¨‡¶æ ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶Æ‡ßá‡¶∏‡ßá‡¶ú‡ßá‡¶∞ ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶æ‡¶ì‡•§ ‡¶ï‡ßÄ ‡¶®‡¶ø‡¶Ø‡¶º‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡¶§‡ßá ‡¶ö‡¶æ‡¶ì? üòÑ
            """
            await update.message.reply_text(welcome_message)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle text messages"""
        user_id = update.effective_user.id
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type
        message_text = update.message.text

        if chat_type == 'private' and user_id != ADMIN_USER_ID:
            response, reply_markup = await self.get_private_chat_redirect()
            await update.message.reply_text(response, reply_markup=reply_markup)
            return

        if chat_type in ['group', 'supergroup']:
            if not (update.message.reply_to_message and update.message.reply_to_message.from_user.id == context.bot.id) and '@IMasterTools' not in message_text:
                return

        await update.message.reply_text("‡¶è‡¶á ‡¶´‡¶ø‡¶ö‡¶æ‡¶∞‡¶ü‡¶ø ‡¶è‡¶ñ‡¶®‡ßã ‡¶Ø‡ßã‡¶ó ‡¶ï‡¶∞‡¶æ ‡¶π‡¶Ø‡¶º‡¶®‡¶ø‡•§ üòÖ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá @IMasterTools ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßá ‡¶Ü‡¶∞‡ßá‡¶ï‡¶ü‡¶æ ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶ï‡¶∞‡ßã!")

    async def get_private_chat_redirect(self):
        """Return redirect message for non-admin private chats"""
        keyboard = [[InlineKeyboardButton("Join Our Group", url="https://t.me/VPSHUB_BD_CHAT")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        return (
            "‡¶π‡ßç‡¶Ø‡¶æ‡¶≤‡ßã! üòä ‡¶Ü‡¶Æ‡¶æ‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶ö‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ï‡¶∞‡¶§‡ßá ‡¶Ü‡¶Æ‡¶æ‡¶¶‡ßá‡¶∞ ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡ßã‡¶ó ‡¶¶‡¶æ‡¶ì‡•§ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶¨‡ßã‡¶§‡¶æ‡¶Æ‡ßá ‡¶ï‡ßç‡¶≤‡¶ø‡¶ï ‡¶ï‡¶∞‡ßá ‡¶ó‡ßç‡¶∞‡ßÅ‡¶™‡ßá ‡¶Ø‡¶æ‡¶ì ‡¶è‡¶¨‡¶Ç @IMasterTools ‡¶Æ‡ßá‡¶®‡¶∂‡¶® ‡¶ï‡¶∞‡ßã!",
            reply_markup
        )

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle errors"""
        logger.error(f"Update {update} caused error: {context.error}")
        if update:
            await update.effective_chat.send_message("‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ üòÖ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßã!")

    def run(self):
        """Run the bot"""
        self.application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    bot = TelegramBot()
    bot.run()